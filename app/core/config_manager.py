# /mrhoustontimer/app/core/config_manager.py
"""–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Relationship Countdown Timer.

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É, –≤–∞–ª–∏–¥–∞—Ü–∏—é (—Å –ø–æ–º–æ—â—å—é Pydantic), —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ config.json.
"""

import json
import uuid
from pathlib import Path
from datetime import datetime, timedelta
from typing import Optional, Literal, List, Dict, Any

from pydantic import BaseModel, Field, ValidationError, field_validator

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ ---

def _now_factory() -> datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è default_factory)."""
    return datetime.now()

def _arrival_30_days_later() -> datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ (–¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –¥–∞—Ç—ã –ø—Ä–∏–µ–∑–¥–∞)."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º timedelta –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    return datetime.now() + timedelta(days=30)

# --- –ú–æ–¥–µ–ª–∏ Pydantic –¥–ª—è –°—Ç—Ä—É–∫—Ç—É—Ä—ã –ö–æ–Ω—Ñ–∏–≥–∞ ---

class ColorConfig(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –±–ª–æ–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞
    color_background: str = "#141414"
    color_text: str = "#E8EAED"
    color_text_emphasis: str = "#FFFFFF"
    color_accent_primary: str = "#F48FB1" # –†–æ–∑–æ–≤—ã–π
    color_accent_secondary: str = "#2A2A2A"
    color_divider: str = "#444444"

    # –≠—Ñ—Ñ–µ–∫—Ç—ã
    color_glow_effect: str = "#F48FB1" # –î–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    color_glow_shadow: str = "#E91E63" # –î–ª—è drop-shadow

    # –§–æ–Ω—ã —Ç–∞–π–º–µ—Ä–æ–≤
    color_timer_arrival_bg: str = "#2A2A2A"
    color_timer_relationship_bg: str = "#2A2A2A"
    color_timer_custom_bg: str = "#212121"
    color_timer_custom_bg_hover: str = "#313131"

    # –¶–≤–µ—Ç–∞ —Ü–∏—Ñ—Ä —Ç–∞–π–º–µ—Ä–æ–≤
    color_timer_countdown: str = "#F48FB1" # –†–æ–∑–æ–≤—ã–π
    color_timer_elapsed: str = "#AECBFA" # –ì–æ–ª—É–±–æ–π

    # –•–µ–¥–µ—Ä
    color_nav_active_indicator: str = "#F48FB1"

    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
    color_arrival_highlight_bg: str = "#4E353F"
    color_arrival_highlight_sticker: str = "#F48FB1"
    color_calendar_day_bg: str = "rgba(0,0,0,0.4)"
    color_calendar_marked_day_bg: str = "#5C3A47" # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –æ—Ç–º–µ—á–µ–Ω–Ω–æ–≥–æ –¥–Ω—è

    @field_validator('*', mode='before')
    @classmethod
    def check_color_format(cls, value: Any) -> Any:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)."""
        if not isinstance(value, str):
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é HEX/RGBA —Ñ–æ—Ä–º–∞—Ç–∞
            raise ValueError('Color value must be a string')
        return value

# –ú–æ–¥–µ–ª—å DayNumberConfig –£–î–ê–õ–ï–ù–ê (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

class ArrivalDayConfig(BaseModel):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–Ω—è –ø—Ä–∏–µ–∑–¥–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    use_bg: bool = True
    bg_color: str = "#4E353F" # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å marked_day –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    use_sticker: bool = True
    sticker_emoji: str = "üíñ"
    sticker_scale: float = Field(default=1.5, ge=0.1, le=10.0) # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –º–∞—Å—à—Ç–∞–±

class CustomTimer(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞."""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    enabled: bool = True
    label: str = Field(default="–ù–æ–≤—ã–π —Ç–∞–π–º–µ—Ä", max_length=50) # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ª–∏–º–∏—Ç
    date: datetime = Field(default_factory=_now_factory)

class TimerConfig(BaseModel):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
    limit_text_length: bool = True
    timer_completed_message: str = Field(default="–°–≤–µ—Ä—à–∏–ª–æ—Å—å!", max_length=20)

    # –¢–∞–π–º–µ—Ä "–î–æ –≤—Å—Ç—Ä–µ—á–∏"
    arrival_timer_enabled: bool = True
    arrival_timer_text: str = Field(default="–î–æ –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏", max_length=50)

    # –¢–∞–π–º–µ—Ä "–ú—ã –≤–º–µ—Å—Ç–µ"
    relationship_timer_enabled: bool = True
    relationship_timer_text: str = Field(default="–ú—ã –≤–º–µ—Å—Ç–µ —É–∂–µ", max_length=50)

    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    custom_timers: List[CustomTimer] = Field(default_factory=list)

class AppConfig(BaseModel):
    """–ö–æ—Ä–Ω–µ–≤–∞—è –º–æ–¥–µ–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (config.json)."""
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    is_first_launch: bool = True
    language: Literal["ru", "en"] = "ru"
    animations_enabled: bool = True
    effects_enabled: bool = True
    blur_strength: float = Field(default=1.5, ge=0, le=20)

    # –ö–ª—é—á–µ–≤—ã–µ –¥–∞—Ç—ã
    date_vova_departure: datetime = Field(default_factory=_now_factory)
    date_vova_arrival: datetime = Field(default_factory=_now_factory) # –î–µ—Ñ–æ–ª—Ç —Ç–µ–ø–µ—Ä—å 'now'
    date_relationship_start: datetime = Field(default_factory=_now_factory)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤ (–≤–ª–æ–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
    timers: TimerConfig = Field(default_factory=TimerConfig)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    sticker_emoji: str = Field(default="X", max_length=2) # –õ–∏–º–∏—Ç –Ω–∞ 1-2 —Å–∏–º–≤–æ–ª–∞
    sticker_color: str = "#F48FB1"
    sticker_scale: float = Field(default=1.0, ge=0.1, le=10.0)
    sticker_random_rotation_max: int = Field(default=15, ge=0, le=180)

    # calendar_min_scale_limit: float = 0.5 # –£–î–ê–õ–ï–ù–û (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    # day_number: DayNumberConfig = Field(default_factory=DayNumberConfig) # –£–î–ê–õ–ï–ù–û (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

    arrival_day: ArrivalDayConfig = Field(default_factory=ArrivalDayConfig)
    calendar_empty_cell_color: str = "rgba(0, 0, 0, 0.15)"
    calendar_marked_day_color: str = "#5C3A47"
    calendar_save_zoom: bool = False

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    effect_particle_day: str = Field(default="üíñ", max_length=2)

    # –ë–ª–æ–∫ —Ü–≤–µ—Ç–æ–≤ (–≤–ª–æ–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
    colors: ColorConfig = Field(default_factory=ColorConfig)


# --- –ö–ª–∞—Å—Å –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

class ConfigManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫–æ–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    def __init__(self, config_path: Optional[Path] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä ConfigManager.

        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É config.json (–º–æ–∂–µ—Ç –±—ã—Ç—å None –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏).
        """
        self.config_path: Optional[Path] = config_path
        self._config: Optional[AppConfig] = None # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥–∞

    def init_app(self, config_path: Path):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.

        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É config.json.
        """
        if not isinstance(config_path, Path):
            raise TypeError("config_path –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º Path")
        self.config_path = config_path
        print(f"[ConfigManager] –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.config_path}")

    def _save(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (_config) –≤ —Ñ–∞–π–ª JSON."""
        if not self.config_path or not self._config:
            print("[ConfigManager] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –ü—É—Ç—å –∏–ª–∏ –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
            return

        try:
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º Pydantic –º–æ–¥–µ–ª—å –≤ JSON —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
            json_data = self._config.model_dump_json(indent=4)
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
            self.config_path.write_text(json_data, encoding="utf-8")
            print(f"[ConfigManager] –ö–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.config_path}")
        except (IOError, TypeError) as e:
            print(f"!!! [ConfigManager] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã (–±—ç–∫–∞–ø, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)

    def backup_and_reset_config(self) -> AppConfig:
        """
        –°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç config.json –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.
        Returns:
            –ù–æ–≤—ã–π (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–π) –æ–±—ä–µ–∫—Ç AppConfig.
        Raises:
            IOError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ñ–∏–≥.
            ValueError: –ï—Å–ª–∏ –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
        """
        if not self.config_path:
            raise ValueError("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

        # 1. –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è –±—ç–∫–∞–ø–∞
        timestamp = datetime.now().strftime("%Y-%m-%dT%H-%M-%S")
        backup_path = self.config_path.parent / f"{self.config_path.stem}.backup.{timestamp}.json"

        try:
            # 2. –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            if self.config_path.exists():
                print(f"[ConfigManager] –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: {backup_path.name}")
                self.config_path.rename(backup_path)
            else:
                print("[ConfigManager] –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—ç–∫–∞–ø –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

            # 3. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            self._config = None  # –û—á–∏—â–∞–µ–º –∫—ç—à
            self.load_or_create_defaults()  # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –Ω–æ–≤—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π

            if self._config is None:
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞.")

            print("[ConfigManager] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º.")
            return self._config

        except (IOError, OSError) as e:
            print(f"!!! [ConfigManager] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –±—ç–∫–∞–ø–µ/—Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—ç–∫–∞–ø, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if backup_path.exists():
                try:
                    backup_path.rename(self.config_path)
                    print("[ConfigManager] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –±—ç–∫–∞–ø–∞.")
                except Exception as restore_e:
                    print(f"!!! [ConfigManager] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—ç–∫–∞–ø: {restore_e}")
            raise e

    def load_or_create_defaults(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω."""
        if not self.config_path:
            raise ValueError("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

        try:
            print(f"[ConfigManager] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ {self.config_path}...")
            raw_data = self.config_path.read_text(encoding="utf-8")
            self._config = AppConfig.model_validate_json(raw_data)
            print("[ConfigManager] –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω.")
        except FileNotFoundError:
            print(f"[ConfigManager] –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞...")
            self._create_default_config()
            self._save() # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        except (json.JSONDecodeError, ValidationError) as e:
            print(f"!!! [ConfigManager] –ö–æ–Ω—Ñ–∏–≥ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –û—à–∏–±–∫–∞: {e}")
            print("!!! [ConfigManager] –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –≤ –ø–∞–º—è—Ç–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω)...")
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥, –Ω–æ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –ø–æ–≤–µ—Ä—Ö —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ
            self._create_default_config()
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –±—ç–∫–∞–ø–∞ —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–¥–µ—Å—å
        except Exception as e:
            print(f"!!! [ConfigManager] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            self._create_default_config() # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤ –ø–∞–º—è—Ç–∏

    def _create_default_config(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç AppConfig —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""
        self._config = AppConfig()
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        self._config.timers.custom_timers.append(
            CustomTimer(label="–°–æ –¥–Ω—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", date=datetime(2023, 1, 1, 12, 0, 0))
        )
        self._config.timers.custom_timers.append(
            CustomTimer(label="–û–Ω–∞ –º–æ—è –Ω–µ–≤–µ—Å—Ç–∞ —É–∂–µ", date=datetime(2024, 1, 1, 12, 0, 0))
        )
        print("[ConfigManager] –û–±—ä–µ–∫—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ —Å–æ–∑–¥–∞–Ω.")


    def get_config(self) -> AppConfig:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç).

        Returns:
            –û–±—ä–µ–∫—Ç AppConfig —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.

        Raises:
            ValueError: –ï—Å–ª–∏ –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
            RuntimeError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥.
        """
        if not self.config_path:
            raise ValueError("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_config().")

        if self._config is None:
            print("[ConfigManager] –ö—ç—à –∫–æ–Ω—Ñ–∏–≥–∞ –ø—É—Å—Ç, –≤—ã–∑—ã–≤–∞–µ–º load_or_create_defaults().")
            self.load_or_create_defaults()

        if self._config is None:
            # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ load_or_create_defaults –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

        return self._config

    def update_config(self, new_config_data: Dict[str, Any]) -> AppConfig:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.

        Args:
            new_config_data: –°–ª–æ–≤–∞—Ä—å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç AppConfig.

        Raises:
            ValidationError: –ï—Å–ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é Pydantic.
            ValueError: –ï—Å–ª–∏ –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
            TypeError: –ï—Å–ª–∏ new_config_data –Ω–µ —Å–ª–æ–≤–∞—Ä—å.
        """
        if not self.config_path:
            raise ValueError("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º update_config().")
        if not isinstance(new_config_data, dict):
            raise TypeError("new_config_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º.")

        try:
            # Pydantic –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            # –í–∞–∂–Ω–æ: model_validate —Å–æ–∑–¥–∞–µ—Ç –ù–û–í–´–ô –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
            updated_config = AppConfig.model_validate(new_config_data)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–ª–∞–≥ 'is_first_launch'
            if updated_config.is_first_launch:
                print("[ConfigManager] –ü–µ—Ä–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ is_first_launch=false.")
                updated_config.is_first_launch = False

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            self._config = updated_config
            self._save()
            print("[ConfigManager] –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
            return self._config
        except ValidationError as e:
            # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–ª—å—à–µ
            print(f"!!! [ConfigManager] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            raise e
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            print(f"!!! [ConfigManager] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≤—ã–±—Ä–æ—Å–∏—Ç—å –∫–∞–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ñ–∏–≥
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: {e}") from e