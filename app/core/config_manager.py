# /mrhoustontimer/app/core/config_manager.py
import json
import uuid  # <-- –ò–ú–ü–û–†–¢ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
from pathlib import Path
from datetime import date
from pydantic import BaseModel, Field, ValidationError
from typing import Optional, Literal, List


# --- Pydantic –ú–æ–¥–µ–ª–∏ (–ù–∞—à–∞ "–°—Ö–µ–º–∞ –î–∞–Ω–Ω—ã—Ö" v2.0) ---

class ColorConfig(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –±–ª–æ–∫–∞ —Ü–≤–µ—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    color_background: str = "#1a1a1a"
    color_text: str = "#e0e0e0"
    color_accent_primary: str = "#ff8c00"
    color_accent_secondary: str = "#4a4a4a"
    color_arrival_highlight_bg: str = "#2f2c00"
    color_arrival_highlight_sticker: str = "#ffbf00"


class DayNumberConfig(BaseModel):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –¥–Ω—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    position: Literal["center", "top-left", "top-right", "bottom-left", "bottom-right"] = "center"
    font_multiplier: float = 1.0
    side_font_multiplier: float = 0.5


class ArrivalDayConfig(BaseModel):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è '–î–Ω—è –ü—Ä–∏–µ–∑–¥–∞' (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    use_bg: bool = True
    use_sticker: bool = True
    sticker_emoji: str = "üíñ"
    sticker_scale: float = 1.5


# --- –ù–û–í–´–ï –ú–û–î–ï–õ–ò –¥–ª—è –¢–∞–π–º–µ—Ä–æ–≤ (–¢–ó) ---

class CustomTimer(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –æ–¥–Ω–æ–≥–æ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è" —Ç–∞–π–º–µ—Ä–∞.
    """
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID, —á—Ç–æ–±—ã JS –º–æ–≥ —Å –Ω–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å (—É–¥–∞–ª—è—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    enabled: bool = True
    label: str
    date: date


class TimerConfig(BaseModel):
    """
    –ù–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¢–∞–π–º–µ—Ä–æ–≤ (–¢–ó)
    """
    limit_text_length: bool = True  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ª–∏ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞

    # –ú–æ–¥—É–ª—å "–î–æ –≤—Å—Ç—Ä–µ—á–∏" (–¢–ó)
    arrival_timer_enabled: bool = True
    arrival_timer_text: str = "–î–æ –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏"

    # –ú–æ–¥—É–ª—å "–°–∫–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ" (–¢–ó)
    relationship_timer_enabled: bool = True
    relationship_timer_text: str = "–ú—ã –≤–º–µ—Å—Ç–µ —É–∂–µ"

    # –°–ø–∏—Å–æ–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ (–¥–µ—Ç–∏ "–°–∫–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ")
    custom_timers: List[CustomTimer] = Field(default_factory=list)


# --- –ì–õ–ê–í–ù–ê–Ø –ú–û–î–ï–õ–¨ –ö–û–ù–§–ò–ì–ê v2.0 ---

class AppConfig(BaseModel):
    """–ì–ª–∞–≤–Ω–∞—è –º–æ–¥–µ–ª—å –∫–æ–Ω—Ñ–∏–≥–∞ (config.json) v2.0"""

    # --- –ù–æ–≤—ã–µ –ø–æ–ª—è (–¢–ó) ---
    is_first_launch: bool = True
    language: Literal["ru", "en"] = "ru"

    # --- –ö–ª—é—á–µ–≤—ã–µ –¥–∞—Ç—ã (–æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ 2) ---
    date_vova_departure: date = date(2025, 1, 1)
    date_vova_arrival: date = date(2025, 12, 31)
    # –≠—Ç–∞ –¥–∞—Ç–∞ –Ω—É–∂–Ω–∞ –¥–ª—è "–°–∫–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ"
    date_relationship_start: date = date(2023, 2, 1)

    # --- –ú–æ–¥—É–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤ (–ù–û–í–´–ô –ú–û–î–£–õ–¨)
    timers: TimerConfig = Field(default_factory=TimerConfig)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (—Å—Ç–∞—Ä—ã–µ)
    sticker_emoji: str = "X"
    sticker_random_rotation_max: int = 15
    calendar_min_scale_limit: float = 0.5
    day_number: DayNumberConfig = Field(default_factory=DayNumberConfig)
    arrival_day: ArrivalDayConfig = Field(default_factory=ArrivalDayConfig)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ (—Å—Ç–∞—Ä—ã–µ)
    colors: ColorConfig = Field(default_factory=ColorConfig)

    # –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è (date_acquaintance, date_engagement) —É–¥–∞–ª–µ–Ω—ã.
    # –û–Ω–∏ –±—É–¥—É—Ç –∂–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ 'custom_timers'.


# --- –ö–ª–∞—Å—Å –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ö–æ–¥ —Ç–æ—Ç –∂–µ, –º–æ–¥–µ–ª—å AppConfig - –Ω–æ–≤–∞—è) ---

class ConfigManager:
    """
    –û–û–ü-–∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è config.json.
    (–≠—Ç–æ—Ç –∫–æ–¥ –ø–æ—á—Ç–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ç.–∫. –æ–Ω –≥–∏–±–∫–∏–π)
    """

    def __init__(self, config_path: Optional[Path] = None):
        self.config_path: Optional[Path] = config_path
        self._config: Optional[AppConfig] = None

    def init_app(self, config_path: Path):
        self.config_path = config_path

    def _save(self):
        if not self.config_path or not self._config:
            return
        json_data = self._config.model_dump_json(indent=4)
        self.config_path.write_text(json_data, encoding="utf-8")

    def load_or_create_defaults(self):
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥.
        –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π.
        """
        try:
            raw_data = self.config_path.read_text(encoding="utf-8")
            self._config = AppConfig.model_validate_json(raw_data)
        except (FileNotFoundError, json.JSONDecodeError, ValidationError) as e:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω "—Å–ª–æ–º–∞–Ω" - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            print(f"Config not found or invalid ({e}). Creating defaults.")
            self._config = AppConfig()  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥ v2.0

            # --- –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ "–î–æ–ø. –ø–æ–ª—è" (–¢–ó) ---
            self._config.timers.custom_timers.append(
                CustomTimer(label="–°–æ –¥–Ω—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", date=date(2023, 1, 1))
            )
            self._config.timers.custom_timers.append(
                CustomTimer(label="–û–Ω–∞ –º–æ—è –Ω–µ–≤–µ—Å—Ç–∞ —É–∂–µ", date=date(2024, 1, 1))
            )
            # --- –ö–æ–Ω–µ—Ü ---

            self._save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º

    def get_config(self) -> AppConfig:
        if not self._config:
            self.load_or_create_defaults()
        return self._config

    def update_config(self, new_config_data: dict) -> AppConfig:
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å (–æ—Ç API), –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –µ–≥–æ
        –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥.
        """
        try:
            # Pydantic —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å–æ –≤—Å–µ–º–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
            self._config = AppConfig.model_validate(new_config_data)

            # --- –û–°–û–ë–´–ô –°–õ–£–ß–ê–ô: "–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫" (–¢–ó) ---
            # –ï—Å–ª–∏ —é–∑–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥, –º—ã *–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ*
            # —Å—Ç–∞–≤–∏–º 'is_first_launch' –≤ 'false'.
            if self._config.is_first_launch:
                print("First launch setup complete. Setting is_first_launch=false.")
                self._config.is_first_launch = False
            # --- –ö–æ–Ω–µ—Ü ---

            self._save()
            return self._config
        except ValidationError as e:
            print(f"Config update error: {e}")
            raise e