# /mrhoustontimer/app/core/config_manager.py
import json
import uuid
from pathlib import Path
from datetime import date, datetime, timedelta
from pydantic import BaseModel, Field, ValidationError
from typing import Optional, Literal, List


# ... (ColorConfig, DayNumberConfig - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
class ColorConfig(BaseModel):
    # --- –ù–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞: –ü–æ—á—Ç–∏ –ß–µ—Ä–Ω—ã–π + –†–æ–∑–æ–≤—ã–π ---
    color_background: str = "#141414"              # –ï—â–µ —Ç–µ–º–Ω–µ–µ —Ñ–æ–Ω
    color_text: str = "#E8EAED"                   # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
    color_text_emphasis: str = "#FFFFFF"         # –°–æ—á–Ω–æ –±–µ–ª—ã–π
    color_accent_primary: str = "#F48FB1"         # –ë–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π –Ω–µ–∂–Ω—ã–π —Ä–æ–∑–æ–≤—ã–π
    color_accent_secondary: str = "#2A2A2A"      # –¢–µ–º–Ω–µ–µ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ñ–æ–Ω
    color_divider: str = "#444444"               # –¢–µ–º–Ω–µ–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏

    color_glow_effect: str = "#F48FB1"


    # --- –§–æ–Ω—ã —Ç–∞–π–º–µ—Ä–æ–≤ ---
    color_timer_arrival_bg: str = "#2A2A2A"       # –§–æ–Ω —Ç–∞–π–º–µ—Ä–∞ "–î–æ –í—Å—Ç—Ä–µ—á–∏"
    color_timer_relationship_bg: str = "#2A2A2A" # –§–æ–Ω —Ç–∞–π–º–µ—Ä–∞ "–ú—ã –í–º–µ—Å—Ç–µ"
    color_timer_custom_bg: str = "#212121"       # –§–æ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã—Ö (—Ç–µ–º–Ω–µ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ–Ω–∞)
    # --- –ù–û–í–´–ô –¶–≤–µ—Ç –¥–ª—è hover –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ ---
    color_timer_custom_bg_hover: str = "#313131" # –ß—É—Ç—å —Å–≤–µ—Ç–ª–µ–µ, —á–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω

    # --- –¶–≤–µ—Ç–∞ —Ü–∏—Ñ—Ä —Ç–∞–π–º–µ—Ä–æ–≤ ---
    color_timer_countdown: str = "#F48FB1"        # –†–æ–∑–æ–≤—ã–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ (–ó–ê–ú–ï–ù–ï–ù)
    color_timer_elapsed: str = "#AECBFA"          # –ù–µ–∂–Ω–æ-–≥–æ–ª—É–±–æ–π (–û–ö)

    # --- –•–µ–¥–µ—Ä ---
    color_nav_active_indicator: str = "#F48FB1"   # –†–æ–∑–æ–≤—ã–π –¥–ª—è –∫—Ä—É–≥–ª—è—à–∫–∞

    # --- –ö–∞–ª–µ–Ω–¥–∞—Ä—å (–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥ –Ω–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É) ---
    color_arrival_highlight_bg: str = "#4E353F"     # –ì–ª—É–±–∂–µ —Ä–æ–∑–æ–≤–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω –¥–Ω—è –ø—Ä–∏–µ–∑–¥–∞
    color_arrival_highlight_sticker: str = "#F48FB1" # –†–æ–∑–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä –¥–Ω—è –ø—Ä–∏–µ–∑–¥–∞
    color_calendar_day_bg: str = "rgba(0,0,0,0.4)" # –§–æ–Ω –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è (—á—É—Ç—å —Ç–µ–º–Ω–µ–µ)
    color_calendar_marked_day_bg: str = "#4E353F"  # –§–æ–Ω –æ—Ç–º–µ—á–µ–Ω–Ω–æ–≥–æ –¥–Ω—è

class DayNumberConfig(BaseModel):
    position: Literal["center", "top-left", "top-right", "bottom-left", "bottom-right"] = "center"
    font_multiplier: float = 1.0
    side_font_multiplier: float = 0.5


class ArrivalDayConfig(BaseModel):
    use_bg: bool = True
    use_sticker: bool = True
    sticker_emoji: str = "üíñ"
    sticker_scale: float = 1.5  # <-- –§–∏–∫—Å "–≤—ã–ª–µ—Ç–∞" —Å—Ç–∏–∫–µ—Ä–∞


# ... (CustomTimer, TimerConfig - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
class CustomTimer(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    enabled: bool = True
    label: str
    date: datetime  # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime


class TimerConfig(BaseModel):
    limit_text_length: bool = True
    arrival_timer_enabled: bool = True
    arrival_timer_text: str = "–î–æ –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏"
    relationship_timer_enabled: bool = True
    relationship_timer_text: str = "–ú—ã –≤–º–µ—Å—Ç–µ —É–∂–µ"
    timer_completed_message: str = Field(default="–°–≤–µ—Ä—à–∏–ª–æ—Å—å!", max_length=20)
    custom_timers: List[CustomTimer] = Field(default_factory=list)


class AppConfig(BaseModel):
    is_first_launch: bool = True
    language: Literal["ru", "en"] = "ru"

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: (–¢–≤–æ–π –ü—É–Ω–∫—Ç 3) ---
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç—ã –∫ 'now()', —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —Ç–≤–æ–µ "–£–ø—Å–∏!" —Å–æ–æ–±—â–µ–Ω–∏–µ
    date_vova_departure: datetime = Field(default_factory=datetime.now)
    date_vova_arrival: datetime = Field(default_factory=datetime.now)
    date_relationship_start: datetime = Field(default_factory=datetime.now)
    # ---

    timers: TimerConfig = Field(default_factory=TimerConfig)
    sticker_emoji: str = "X"
    sticker_random_rotation_max: int = 15
    calendar_min_scale_limit: float = 0.5
    day_number: DayNumberConfig = Field(default_factory=DayNumberConfig)
    arrival_day: ArrivalDayConfig = Field(default_factory=ArrivalDayConfig)
    colors: ColorConfig = Field(default_factory=ColorConfig)

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: (–¢–≤–æ–π –ü—É–Ω–∫—Ç 2) ---
    # –î–µ–ª–∞–µ–º "–ø–æ—Ç–µ–º–Ω–µ–µ"
    calendar_empty_cell_color: str = "rgba(0, 0, 0, 0.15)"
    calendar_marked_day_color: str = "#5C3A47"

    calendar_save_zoom: bool = False
    # ---


class ConfigManager:
    # ... (init, init_app, _save - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    def __init__(self, config_path: Optional[Path] = None):
        self.config_path: Optional[Path] = config_path
        self._config: Optional[AppConfig] = None

    def init_app(self, config_path: Path):
        self.config_path = config_path

    def _save(self):
        if not self.config_path or not self._config:
            return
        json_data = self._config.model_dump_json(indent=4)
        self.config_path.write_text(json_data, encoding="utf-8")

    def load_or_create_defaults(self):
        try:
            raw_data = self.config_path.read_text(encoding="utf-8")
            self._config = AppConfig.model_validate_json(raw_data)
        except (FileNotFoundError, json.JSONDecodeError, ValidationError) as e:
            print(f"!!! [ConfigManager] Config not found or invalid. Error: {e}")
            print("!!! [ConfigManager] Creating new default config...")
            self._config = AppConfig()
            self._config.timers.custom_timers.append(
                CustomTimer(label="–°–æ –¥–Ω—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", date=datetime(2023, 1, 1, 12, 0, 0))
            )
            self._config.timers.custom_timers.append(
                CustomTimer(label="–û–Ω–∞ –º–æ—è –Ω–µ–≤–µ—Å—Ç–∞ —É–∂–µ", date=datetime(2024, 1, 1, 12, 0, 0))
            )
            self._save()

    # ... (get_config, update_config - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    def get_config(self) -> AppConfig:
        if not self._config:
            self.load_or_create_defaults()
        return self._config

    def update_config(self, new_config_data: dict) -> AppConfig:
        try:
            self._config = AppConfig.model_validate(new_config_data)
            if self._config.is_first_launch:
                print("First launch setup complete. Setting is_first_launch=false.")
                self._config.is_first_launch = False
            self._save()
            return self._config
        except ValidationError as e:
            print(f"Config update error: {e}")
            raise e