/**
 * –•–ï–õ–ü–ï–†: –ò–∑–º–µ–Ω—è–µ—Ç —è—Ä–∫–æ—Å—Ç—å HEX-—Ü–≤–µ—Ç–∞.
 * @param {string} hex - (e.g., "#F48FB1")
 * @param {number} percent - (e.g., 20 = 20% —Ç–µ–º–Ω–µ–µ, -20 = 20% —Å–≤–µ—Ç–ª–µ–µ)
 * @returns {string}
 */
function changeColorBrightness(hex, percent) {
    if (!hex) return '#333';
    let hexValue = hex.replace('#', '');
    if (hexValue.length === 3) {
        hexValue = hexValue.split('').map(char => char + char).join('');
    }
    if (hexValue.length !== 6) { return '#333'; }

    // 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
    let r = parseInt(hexValue.substring(0, 2), 16);
    let g = parseInt(hexValue.substring(2, 4), 16);
    let b = parseInt(hexValue.substring(4, 6), 16);

    // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º % (percent > 0 = —Ç–µ–º–Ω–µ–µ, percent < 0 = —Å–≤–µ—Ç–ª–µ–µ)
    const factor = (100 - percent) / 100;
    r = Math.min(255, Math.max(0, Math.floor(r * factor)));
    g = Math.min(255, Math.max(0, Math.floor(g * factor)));
    b = Math.min(255, Math.max(0, Math.floor(b * factor)));

    // 3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ HEX
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase();
}


/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è Alpine (x-data="wheelController()")
 */
function wheelController() {
    return {
        // --- 1. –õ–æ–∫–∞–ª—å–Ω–æ–µ –°–æ—Å—Ç–æ—è–Ω–∏–µ ---
        options: [],
        isSpinning: false,
        wheelData: {
            gradient: 'background-color: var(--color-accent-secondary)',
            textSectors: []
        },

        // *** [ –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –§–∏–∑–∏–∫–∏ ] ***
        angle: 0,          // –¢–µ–∫—É—â–∏–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
        velocity: 0,       // –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–≥—Ä–∞–¥—É—Å–æ–≤/–∫–∞–¥—Ä)
        friction: 0.998,   // –¢—Ä–µ–Ω–∏–µ (0.998 = –º–µ–¥–ª–µ–Ω–Ω–æ, 0.99 = –±—ã—Å—Ç—Ä–æ)
        isSpinning: false, // –§–ª–∞–≥, —á—Ç–æ –∏–¥–µ—Ç –∫—Ä—É—á–µ–Ω–∏–µ
        animationFrameId: null, // ID –¥–ª—è requestAnimationFrame

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –§–∏–∑–∏–∫–∏ (–º–æ–∂–µ–º –≤—ã–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        MIN_VELOCITY: 0.01,   // –°–∫–æ—Ä–æ—Å—Ç—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∫–æ–ª–µ—Å–æ "–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è"
        MAX_VELOCITY: 70,    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π "–∫–ª–∞–º–ø" —Å–∫–æ—Ä–æ—Å—Ç–∏
        FRICTION_FAST: 0.998, // –°–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ (—Ç–≤–æ–µ "—Å–µ–π—á–∞—Å")
        FRICTION_SLOW: 0.99, // –°–∞–º–æ–µ –º–µ–¥–ª–µ–Ω–Ω–æ–µ ("–ø–æ–≤–µ—Å–æ–º–µ–µ")

        particleList: [
            'üëâ','üëà', 'üåö', 'üíï','‚ù§Ô∏è','ü´¶','üò∂‚Äçüå´Ô∏è','üòç','üëç','ü§¶‚Äç‚ôÇÔ∏è',
            'ü•≤','ü§¨','ü§°','üí©','üë∫','üëΩ','üëø','üêΩ','üêí','üê≥',
            'ü¶â','üëÅÔ∏è','üëÄ','üßå','ü§∑‚Äç‚ôÇÔ∏è','üôÜ‚Äç‚ôÇÔ∏è','üï∫','üíÉ','üëÉ','ü§å'
        ],

        previousAngle: 0,    // –£–≥–æ–ª –≤ –ø—Ä–æ—à–ª–æ–º –∫–∞–¥—Ä–µ
        boundaryAngles: [],  // –ú–∞—Å—Å–∏–≤ —É–≥–ª–æ–≤ –≥—Ä–∞–Ω–∏—Ü [0, 90, 180, 270]

        // --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
        init() {
            console.log("--- [DEBUG] wheelController v2.3 (–§–∏–∫—Å): –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...");

            // *** [ –ò–°–ü–†–ê–í–õ–ï–ù–û ] ***
            // –£–ë–ò–†–ê–ï–ú Alpine.effect().
            // –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º 'options' –û–î–ò–ù –†–ê–ó –∏–∑ $store.app.config.

            // –ñ–¥–µ–º, –ø–æ–∫–∞ $store –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            Alpine.nextTick(() => {
                const storeConfig = Alpine.store('app').config;
                if (storeConfig && storeConfig.wheel_options && storeConfig.wheel_options.length > 0) {
                    this.options = JSON.parse(JSON.stringify(storeConfig.wheel_options));
                    console.log(`--- [DEBUG] wheel: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.options.length} –æ–ø—Ü–∏–π.`);
                } else {
                    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞
                    this.options = [
                        { id: crypto.randomUUID(), label: "–û–ø—Ü–∏—è 1" },
                        { id: crypto.randomUUID(), label: "–û–ø—Ü–∏—è 2" },
                        { id: crypto.randomUUID(), label: "–û–ø—Ü–∏—è 3" },
                    ];
                }

                // *** –ü–µ—Ä–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–ª–µ—Å–∞ ***
                this.generateWheelVisuals();
            });

            // *** [ –ò–°–ü–†–ê–í–õ–ï–ù–û ] ***
            // –≠—Ç–æ—Ç $watch —Å–ª–µ–¥–∏—Ç –¢–û–õ–¨–ö–û –∑–∞ 'options'
            // –∏ –¢–û–õ–¨–ö–û –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–æ–ª–µ—Å–æ.
            Alpine.watch(() => this.options, () => {
                console.log("--- [DEBUG] wheel (watch): 'options' –∏–∑–º–µ–Ω–∏–ª–∏—Å—å. –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞...");
                this.generateWheelVisuals();
            }, { deep: true });

            // *** [ –ù–û–í–û–ï ] ***
            // –û—Ç–¥–µ–ª—å–Ω—ã–π $watch –¥–ª—è 'revert'.
            // –û–Ω —Å–ª–µ–¥–∏—Ç –∑–∞ $store.app.config (–∞ –Ω–µ .form),
            // –ø–æ—Ç–æ–º—É —á—Ç–æ 'revert' –∫–æ–ø–∏—Ä—É–µ—Ç 'config' –≤ 'form'.
            Alpine.watch(() => Alpine.store('app').config, (newConfig) => {
                 if (newConfig && !Alpine.store('app').ui.isDirty) {
                     console.log("--- [DEBUG] wheel (watch config): –û–±–Ω–∞—Ä—É–∂–µ–Ω 'revert'. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ 'options'...");
                     this.options = JSON.parse(JSON.stringify(newConfig.wheel_options || []));
                 }
            }, { deep: true });
            this.update = this.update.bind(this); // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º 'this'
            this.update(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª
        },

        // --- 3. –ú–µ—Ç–æ–¥—ã –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°–ø–∏—Å–∫–æ–º ---
        addOption() {
        // *** [ –ù–û–í–û–ï: –õ–∏–º–∏—Ç 30 ] ***
        if (this.options.length >= 30) {
            console.warn("--- [DEBUG] wheel: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç (30), –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
            return;
        }
        // *** [ –ö–û–ù–ï–¶ ] ***

        console.log("--- [DEBUG] wheel: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–∏...");
        this.options.push({ id: crypto.randomUUID(), label: "–ù–æ–≤–∞—è –æ–ø—Ü–∏—è" });
    },
        removeOption(id) {
            console.log(`--- [DEBUG] wheel: –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–∏ ${id}...`);
            this.options = this.options.filter(opt => opt.id !== id);
            // $watch() –ø–æ–π–º–∞–µ—Ç —ç—Ç–æ
        },
        async saveToDefaults() {
            console.log("--- [DEBUG] wheel: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ü–∏–π –≤ config...");
            const store = Alpine.store('app');
            if (!store.form) { /* ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏) ... */ return; }

            // 1. –û–±–Ω–æ–≤–ª—è–µ–º $store.app.form
            store.form.wheel_options = JSON.parse(JSON.stringify(this.options));
            // 2. –ü–æ–º–µ—á–∞–µ–º 'dirty'
            store.markDirty();
            // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–ï–ó –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            const success = await store.saveSettings(store.form, false);

            // 4. –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
            if (success) {
                console.log("--- [DEBUG] wheel: –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º '‚úÖ'");
                if (typeof spawnParticles === 'function' && this.$refs.saveButton) {
                    spawnParticles({
                        originElement: this.$refs.saveButton,
                        symbol: '‚úÖ', count: 40, spread: 180, distance: 300, duration: 1200
                    });
                }
            } else {
                console.log("--- [DEBUG] wheel: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º '‚ùå'");
                if (typeof spawnParticles === 'function' && this.$refs.saveButton) {
                    spawnParticles({
                        originElement: this.$refs.saveButton,
                        symbol: '‚ùå', count: 40, spread: 180, distance: 300, duration: 1200
                    });
                }
            }
        },

        // --- 4. –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –§–∏–∑–∏–∫–∏ ---
        spin() {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–∂–µ –∫—Ä—É—Ç–∏—Ç—Å—è (–ø–æ–∫–∞ –Ω–µ—Ç "–¥–æ–∫—Ä—É—Ç–∫–∏")
            if (this.isSpinning) {
                // --- –°–¢–£–õ 2: "–î–û–ö–†–£–ß–ò–í–ê–ù–ò–ï" ---
                this.friction = Math.random() * (this.FRICTION_FAST - this.FRICTION_SLOW) + this.FRICTION_SLOW;
                console.log("--- [DEBUG] wheel: –î–æ–∫—Ä—É—á–∏–≤–∞–µ–º (–¢–µ–∫—É—â–∞—è v –∏ f: " + this.velocity.toFixed(2) + ")" + this.friction.toFixed(3));

                let boost;
                // (–¢–≤–æ—è –ª–æ–≥–∏–∫–∞: "—á–µ–º –±—ã—Å—Ç—Ä–µ–µ, —Ç–µ–º –º–µ–Ω—å—à–µ —Å–∏–ª–∞")
                if (this.velocity > 30) {
                    boost = (Math.random() * 2.5) + 2.5; // (5-10)
                } else if (this.velocity > 15) {
                    boost = (Math.random() * 5) + 5; // (10-20)
                } else {
                    boost = (Math.random() * 7.5) + 10; // (20-35)
                }

                console.log("--- [DEBUG] wheel: +++ Boost: " + boost.toFixed(2));
                this.velocity += boost;

                let particleCount = 0;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ù–û–í–£–Æ —Å–∫–æ—Ä–æ—Å—Ç—å
                if (this.velocity > 30) {
                    particleCount = 6;
                } else if (this.velocity > 20) {
                    particleCount = 4;
                } else if (this.velocity > 10) {
                    particleCount = 2;
                } else if (this.velocity > 0) {
                    particleCount = 1;
                }

                if (particleCount > 0 && typeof spawnParticles === 'function' && this.$refs.spinButton) {
                    console.log(`--- [DEBUG] wheel: –ó–∞–ø—É—Å–∫ ${particleCount} —á–∞—Å—Ç–∏—Ü –¥–æ–∫—Ä—É—Ç–∫–∏!`);
                    spawnParticles({
                        originElement: this.$refs.spinButton, // –ù–∞—à–∞ –∫–Ω–æ–ø–∫–∞
                        symbol: 'üî•', // –û–≥–æ–Ω—å!
                        count: particleCount,
                        spread: 360, // –í–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã
                        distance: 250, // –ù–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
                        duration: 5000 // –ë—ã—Å—Ç—Ä–æ
                    });
                }
            } else {
                console.log("--- [DEBUG] wheel: –ù–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏–Ω!");

                // 1. –†–∞–Ω–¥–æ–º–Ω–æ–µ –¢—Ä–µ–Ω–∏–µ (–¢–≤–æ—è –∏–¥–µ—è)
                this.friction = Math.random() * (this.FRICTION_FAST - this.FRICTION_SLOW) + this.FRICTION_SLOW;
                console.log("--- [DEBUG] wheel: –ù–æ–≤–æ–µ —Ç—Ä–µ–Ω–∏–µ: " + this.friction.toFixed(4));

                // 2. –†–∞–Ω–¥–æ–º–Ω—ã–π –°–∏–ª—å–Ω—ã–π –ò–º–ø—É–ª—å—Å
                this.velocity = (Math.random() * 50) + 30; // (50-100)

                this.isSpinning = true;
            }
            if (this.velocity > this.MAX_VELOCITY) {
                console.warn("--- [DEBUG] wheel: –°–ö–û–†–û–°–¢–¨ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê! (Clamped)");
                this.velocity = this.MAX_VELOCITY;
            }
        },
        /**
         * "–ò–≥—Ä–æ–≤–æ–π –¶–∏–∫–ª" - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è 60 —Ä–∞–∑/—Å–µ–∫
         */
        update() {
            // (–≠—Ç–æ—Ç –∫–æ–¥ –º—ã —É–∂–µ –ø–∏—Å–∞–ª–∏ –≤ –≠—Ç–∞–ø–µ 3, –ø—Ä–æ—Å—Ç–æ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å)
            if (this.velocity > this.MIN_VELOCITY) {
                this.isSpinning = true;

                // 1. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–µ–Ω–∏–µ (–∑–∞–º–µ–¥–ª–µ–Ω–∏–µ)
                this.velocity *= this.friction;

                // 2. –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª
                this.angle += this.velocity;
                this.angle %= 360; // –î–µ—Ä–∂–∏–º —É–≥–æ–ª 0-360

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, "–ø–µ—Ä–µ–ø—Ä—ã–≥–Ω—É–ª–∏" –ª–∏ –º—ã —á–µ—Ä–µ–∑ 0 (360)
                // (e.g., previousAngle = 359.8, angle = 0.5)
                if (this.angle < this.previousAngle) {
                    // –ú—ã –ø–µ—Ä–µ—Å–µ–∫–ª–∏ –ì–õ–ê–í–ù–£–Æ –≥—Ä–∞–Ω–∏—Ü—É (0/360)
                    this.triggerSectorCross();
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (90, 180, 270...)
                for (const boundary of this.boundaryAngles) {
                    // –ï—Å–ª–∏ –≥—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ –ú–ï–ñ–î–£ –ø—Ä–æ—à–ª—ã–º —É–≥–ª–æ–º –∏ —Ç–µ–∫—É—â–∏–º
                    if (this.previousAngle < boundary && this.angle >= boundary) {
                        this.triggerSectorCross();
                    }
                }

            } else if (this.isSpinning) {
                // –ö–æ–ª–µ—Å–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
                this.isSpinning = false;
                this.velocity = 0;
                this.triggerStopEffect();
                console.log("--- [DEBUG] wheel: –û—Å—Ç–∞–Ω–æ–≤–∫–∞.");
            }

            this.previousAngle = this.angle;

            // 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
            this.animationFrameId = requestAnimationFrame(this.update);
        },

        stopSpin() {
            if (!this.isSpinning) return; // –ù–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å

            console.log("--- [DEBUG] wheel: STOP! (–ö–ª–∏–∫ –ø–æ —Å—Ç—Ä–µ–ª–∫–µ)");

            // (–¢–≤–æ—è "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞")
            this.velocity = Math.min(this.velocity, 1); // –ï–ª–µ-–µ–ª–µ
            this.friction = 0.95; // –û–≥—Ä–æ–º–Ω–æ–µ —Ç—Ä–µ–Ω–∏–µ, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–∞ ~3-4 –∫–∞–¥—Ä–∞
        },
        triggerSectorCross() {
            console.log("--- [–ó–í–£–ö] –ü–ï–†–ï–°–ï–ö–õ–ê!");

            // –í—ã–ø—É—Å–∫–∞–µ–º "–≥–∞–ª–æ—á–∫—É" –∏–∑ —Å—Ç—Ä–µ–ª–∫–∏
            if (typeof spawnParticles === 'function' && this.$refs.wheelPointer) {
                 spawnParticles({
                    originElement: this.$refs.wheelPointer,
                    symbol: '‚ú®', // –û–≥–æ–Ω–µ–∫ (–ø–æ–∫–∞ —á—Ç–æ)
                    count: 1,
                    spread: 45, // –í–Ω–∏–∑
                    distance: 600, // –ë–ª–∏–∑–∫–æ
                    duration: 500,
                    aim: -1,
                    deg_aim: 45
                });
            }
            // (–ó–¥–µ—Å—å –±—É–¥–µ—Ç `AudioManager.playRandom('wheel_tick')`)
        },
        // --- 5. –•–µ–ª–ø–µ—Ä—ã –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ---
        get sectors() {
            const activeOptions = this.options.filter(opt => opt.label && opt.label.trim() !== '');
            if (activeOptions.length === 0) {
                return [{ id: 'placeholder', label: '?' }];
            }
            return activeOptions;
        },
        triggerStopEffect() {
            console.log("--- [–≠–§–§–ï–ö–¢] –ö–æ–ª–µ—Å–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º –í–ó–†–´–í!");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ –ì–õ–û–ë–ê–õ–¨–ù–û–ú –∫–æ–Ω—Ñ–∏–≥–µ
            if (!Alpine.store('app').config.effects_enabled) return;

            if (typeof spawnParticles !== 'function' || !this.$refs.wheelSpinner) {
                 console.warn("--- [–≠–§–§–ï–ö–¢] spawnParticles –∏–ª–∏ wheelSpinner –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                 return;
            }

            // 1. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–∑ —Å–ø–∏—Å–∫–∞
            const randomSymbol = this.particleList[Math.floor(Math.random() * this.particleList.length)];

            // 2. –ó–∞–ø—É—Å–∫–∞–µ–º "–≤–∑—Ä—ã–≤"
            spawnParticles({
                originElement: this.$refs.wheelSpinner, // –¶–µ–Ω—Ç—Ä –∫–æ–ª–µ—Å–∞
                symbol: randomSymbol, // –¢–≤–æ–π —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª
                count: 100,        // –ú–Ω–æ–≥–æ!
                spread: 360,      // –í–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã
                distance: 500,    // –î–∞–ª–µ–∫–æ
                duration: 5000,   // –î–æ–ª–≥–æ
                particleClass: 'wheel-stop-particle' // (–î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ CSS)
            });
        },
        generateWheelVisuals() {
            console.log("--- [DEBUG] wheel: generateWheelVisuals() v2.4 (JS-–ú–∞—Ç–∞–Ω)");

            const currentSectors = this.sectors;
            const total = currentSectors.length;

            const colorDefault = getComputedStyle(document.documentElement).getPropertyValue('--color-accent-secondary').trim() || '#2A2A2A';
            const colorDarker = changeColorBrightness(colorDefault, 20);
            const colorLighter = changeColorBrightness(colorDefault, -15);

            const segmentAngle = 360 / total;
            let gradientString = 'conic-gradient(';
            let textSectors = [];
            let newBoundaryAngles = [];

            const textRadiusPercent = 25;

            const angleOffsetRad = -Math.PI / 2; // -90 –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö

            for (let i = 0; i < total; i++) {
                // ... (–õ–æ–≥–∏–∫–∞ —Ü–≤–µ—Ç–∞ 'color' - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
                let color;
                if (total > 1 && total % 2 !== 0 && i === total - 1) {
                    color = colorLighter;
                } else {
                    color = (i % 2 === 0) ? colorDefault : colorDarker;
                }

                const startAngle = segmentAngle * i;
                const endAngle = segmentAngle * (i + 1);

                gradientString += `${color} ${startAngle}deg ${endAngle}deg`;
                if (i < total - 1) gradientString += ', ';

                if (startAngle > 0) {
                    newBoundaryAngles.push(startAngle);
                }

                const textAngleDeg = startAngle + (segmentAngle / 2);
                const textAngleRad = (textAngleDeg * Math.PI / 180) + angleOffsetRad;

                const x = 50 + (textRadiusPercent * Math.cos(textAngleRad));
                const y = 50 + (textRadiusPercent * Math.sin(textAngleRad));

                const rotation = textAngleDeg + 90 + 180; // <-- 90 = –≤–¥–æ–ª—å —Ä–∞–¥–∏—É—Å–∞

                textSectors.push({
                    id: currentSectors[i].id,
                    label: currentSectors[i].label,
                    // –ü–µ—Ä–µ–¥–∞–µ–º CSS-—Å—Ç—Ä–æ–∫–∏
                    left: `${x}%`,
                    top: `${y}%`,
                    transform: `translate(-50%, -50%) rotate(${rotation}deg)`
                });
            }

            gradientString += ')';

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.wheelData = {
                gradient: gradientString,
                textSectors: textSectors
            };

            this.boundaryAngles = newBoundaryAngles;
            console.log("--- [DEBUG] wheel: –ì—Ä–∞–Ω–∏—Ü—ã —Å–µ–∫—Ç–æ—Ä–æ–≤:", this.boundaryAngles);
        }
    };
} // <-- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ wheelController