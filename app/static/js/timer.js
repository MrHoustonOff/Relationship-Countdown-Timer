// /mrhoustontimer/app/static/js/timer.js
/**
 * @fileoverview –ö–ª–∞—Å—Å Ticker –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —á–∞—Å—Ç–∏—Ü –∏–∑ –º–µ–Ω—è—é—â–∏—Ö—Å—è —Ü–∏—Ñ—Ä.
 */

class Ticker {
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Ticker.
     * @param {HTMLElement | null} element - DOM-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     * @param {Date | string} referenceDate - –î–∞—Ç–∞ –æ—Ç—Å—á–µ—Ç–∞.
     * @param {'countdown' | 'elapsed'} [mode='elapsed'] - –†–µ–∂–∏–º.
     * @param {string} [completedMessage='Done!'] - –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.
     * @param {string} [elementId=''] - ID —ç–ª–µ–º–µ–Ω—Ç–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞).
     */
    constructor(element, referenceDate, mode = 'elapsed', completedMessage = "Done!", elementId = '') {
        this.element = element;
        this.referenceDate = new Date(referenceDate);
        this.mode = mode;
        this.completedMessage = completedMessage;
        this.elementId = elementId;
        this.intervalId = null;
        /** @private @type {string | null} */
        this.previousTimeString = null; // –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–∏—Ñ—Ä

        this._update = this._update.bind(this);

        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        if (!this.element || !(this.element instanceof HTMLElement)) {
            console.error("[Ticker] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π DOM-—ç–ª–µ–º–µ–Ω—Ç:", element);
            this.element = null;
        }
        if (isNaN(this.referenceDate.getTime())) {
             console.error("[Ticker] –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞:", referenceDate);
             this.referenceDate = new Date();
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É span'–æ–≤ –ë–ï–ó –∞–Ω–∏–º–∞—Ü–∏–∏
        if (this.element) {
            // –°–æ–∑–¥–∞–µ–º span'—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            const initialString = '--:--:--:--';
            this.element.innerHTML = initialString.split('')
                .map((char, index) => `<span class="digit-char digit-${index}">${char}</span>`) // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π –∫–ª–∞—Å—Å
                .join('');
            this.previousTimeString = initialString;
        }
    }

    _pad(num) {
        const number = Number(num);
        if (isNaN(number)) return "00";
        return number < 10 ? '0' + number : number.toString();
    }

    /**
     * [v3.1] –û–±–Ω–æ–≤–ª—è–µ—Ç DOM –∏ —Å–ø–∞–≤–Ω–∏—Ç —á–∞—Å—Ç–∏—Ü—ã –∏–∑ –∏–∑–º–µ–Ω–∏–≤—à–∏—Ö—Å—è —Ü–∏—Ñ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤).
     * @private
     */
    _update() {
        if (!this.element) return;

        const now = new Date();
        let diffMs;
        if (this.mode === 'countdown') diffMs = this.referenceDate.getTime() - now.getTime();
        else diffMs = now.getTime() - this.referenceDate.getTime();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (this.mode === 'countdown' && diffMs < 0) {
            if (this.element.innerText !== this.completedMessage) {
                 // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
                 this.element.innerHTML = this.completedMessage;
            }
            this.stop();
            return;
        }

        // –†–∞—Å—á–µ—Ç –î:–ß:–ú:–°
        const MS_IN_SECOND = 1000, SECONDS_IN_MINUTE = 60, MINUTES_IN_HOUR = 60, HOURS_IN_DAY = 24;
        const SECONDS_IN_HOUR = SECONDS_IN_MINUTE * MINUTES_IN_HOUR, SECONDS_IN_DAY = SECONDS_IN_HOUR * HOURS_IN_DAY;
        const totalSeconds = Math.floor(Math.abs(diffMs) / MS_IN_SECOND);
        const days = Math.floor(totalSeconds / SECONDS_IN_DAY);
        const hours = Math.floor((totalSeconds % SECONDS_IN_DAY) / SECONDS_IN_HOUR);
        const minutes = Math.floor((totalSeconds % SECONDS_IN_HOUR) / SECONDS_IN_MINUTE);
        const seconds = totalSeconds % SECONDS_IN_MINUTE;

        const currentTimeString = `${this._pad(days)}:${this._pad(hours)}:${this._pad(minutes)}:${this._pad(seconds)}`;

        // --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –¶–ò–§–† –ò –≠–§–§–ï–ö–¢ ---
        if (currentTimeString !== this.previousTimeString) {
            const currentChars = currentTimeString.split('');
            const previousChars = (this.previousTimeString || '').split('');
            const spans = this.element.querySelectorAll('.digit-char');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            if (spans.length === currentChars.length) {
                currentChars.forEach((newChar, index) => {
                    const span = spans[index];
                    const oldChar = previousChars[index];

                    // –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if (newChar !== oldChar) {
                        span.textContent = newChar; // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç

                        // --- –í—ã–∑–æ–≤ –≠—Ñ—Ñ–µ–∫—Ç–∞ –ß–∞—Å—Ç–∏—Ü (–•–æ—Ç–µ–ª–∫–∞ 1+2) ---
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –û–°–ù–û–í–ù–´–• —Ç–∞–π–º–µ—Ä–æ–≤ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã
                        const isMainTimer = (this.elementId === 'timer-arrival-display' || this.elementId === 'timer-relationship-display');
                        const isMainPageActive = document.getElementById('page-main')?.classList.contains('active');
                        if (isMainTimer && APP_CONFIG && APP_CONFIG.effects_enabled && isMainPageActive) {
                            spawnParticles({
                                originElement: span, // <-- –ò—Å—Ç–æ—á–Ω–∏–∫ - —Å–∞–º span —Å —Ü–∏—Ñ—Ä–æ–π!
                                symbol: APP_CONFIG.effect_particle_day || 'üíñ',
                                count: 1,      // 1 —á–∞—Å—Ç–∏—Ü–∞
                                spread: 30,   // –£–∑–∫–∏–π –∫–æ–Ω—É—Å –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑
                                distance: 300, // –ë–ª–∏–∑–∫–æ –∫ —Ü–∏—Ñ—Ä–µ
                                duration: 1200 // –ë—ã—Å—Ç—Ä–æ –∏—Å—á–µ–∑–∞–µ—Ç
                            });
                        }
                        // --- –ö–æ–Ω–µ—Ü –≠—Ñ—Ñ–µ–∫—Ç–∞ ---
                    }
                });
            } else {
                 // –ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ span'–æ–≤ —Å–ª–æ–º–∞–ª–∞—Å—å
                 console.warn("[Ticker] –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ span'–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.");
                 this.element.innerHTML = currentChars.map((char, index) => `<span class="digit-char digit-${index}">${char}</span>`).join('');
            }
            this.previousTimeString = currentTimeString;
        }
        // --- –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ò–Ø ---
    }

    start() {
        if (!this.element) return;
        if (this.intervalId !== null) return;
        console.debug("[Ticker] –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞:", this.elementId || this.element.tagName);
        this._update();
        this.intervalId = window.setInterval(this._update, 1000);
    }

    stop() {
        if (this.intervalId !== null) {
            console.debug("[Ticker] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞:", this.elementId || this.element?.tagName);
            window.clearInterval(this.intervalId);
            this.intervalId = null;
            this.previousTimeString = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        }
    }
}