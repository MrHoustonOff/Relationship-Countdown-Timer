/**
 * @fileoverview v2.2 (—Å Ticker)
 * –†–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —è–¥—Ä–æ.
 * –®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω alpineTicker –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∞–π–º–µ—Ä–æ–≤.
 */

// --- –£—Ç–∏–ª–∏—Ç–∞ Ticker (x-init) ---
function alpineTicker(elementId, getTargetDate, getMode, getCompletedMsg) {
    return {
        // State
        element: null,
        intervalId: null,
        previousTimeString: '--:--:--:--',

        // Getters
        get targetDate() { return new Date(getTargetDate()); },
        get mode() { return getMode(); },
        get completedMessage() { return getCompletedMsg(); },

        // --- Init (–ò–°–ü–†–ê–í–õ–ï–ù–û) ---
        init() {
            // (–§–ò–ö–° ‚Ññ2)
            // –ú—ã "–æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º" init, —á—Ç–æ–±—ã Alpine —É—Å–ø–µ–ª –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å
            // –¥–æ—á–µ—Ä–Ω–∏–π div, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏—â–µ–º –ø–æ ID.
            Alpine.nextTick(() => {
                this.element = document.getElementById(elementId);
                if (!this.element) {
                    // –≠—Ç–∞ –æ—à–∏–±–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–ª—è—Ç—å—Å—è
                    console.error(`[Ticker] –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: #${elementId}`);
                    return;
                }
                // –°–æ–∑–¥–∞–µ–º span'—ã
                this.element.innerHTML = this.previousTimeString.split('')
                    .map((char, i) => `<span class="digit-char digit-${i}">${char}</span>`)
                    .join('');

                // $watch —Å–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
                Alpine.watch(() => [this.targetDate, this.mode, this.completedMessage], () => {
                    console.log(`[Ticker] ${elementId}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ. (–ü–µ—Ä–µ)–ó–∞–ø—É—Å–∫...`);
                    this.stop();
                    if (this.targetDate && !isNaN(this.targetDate.getTime())) {
                       this.start();
                    }
                });

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ü–ï–†–í–´–ô –†–ê–ó
                 if (this.targetDate && !isNaN(this.targetDate.getTime())) {
                       this.start();
                 }
            });
        }, // –ö–æ–Ω–µ—Ü init

        // --- Methods ---
        start() {
            if (this.intervalId) return; // –£–∂–µ –∑–∞–ø—É—â–µ–Ω
            this.update(); // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–ø–¥–µ–π—Ç
            this.intervalId = setInterval(() => this.update(), 1000);
        },
        stop() {
            clearInterval(this.intervalId);
            this.intervalId = null;
        },

        // --- update (–ò–°–ü–†–ê–í–õ–ï–ù–û) ---
        update() {
            if (!this.element) return;

            const now = new Date();
            let diffMs;

            // (–§–ò–ö–° ‚Ññ1)
            // 'this.referenceDate' –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ 'this.targetDate'
            if (this.mode === 'countdown') {
                diffMs = this.targetDate.getTime() - now.getTime();
            } else {
                diffMs = now.getTime() - this.targetDate.getTime(); // <-- –í–û–¢ –§–ò–ö–°
            }
            // --- (–ö–æ–Ω–µ—Ü —Ñ–∏–∫—Å–∞) ---

            if (this.mode === 'countdown' && diffMs < 0) {
                this.element.innerHTML = this.completedMessage;
                this.stop();
                return;
            }

            const totalSeconds = Math.floor(Math.abs(diffMs) / 1000);
            const days = Math.floor(totalSeconds / 86400);
            const hours = Math.floor((totalSeconds % 86400) / 3600);
            const minutes = Math.floor((totalSeconds % 3600) / 60);
            const seconds = totalSeconds % 60;

            const pad = (num) => (num < 10 ? '0' + num : num.toString());
            const currentTimeString = `${pad(days)}:${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;

            if (currentTimeString !== this.previousTimeString) {
                const spans = this.element.querySelectorAll('.digit-char');
                const currentChars = currentTimeString.split('');

                currentChars.forEach((newChar, index) => {
                    const span = spans[index];
                    if (span && newChar !== (this.previousTimeString[index] || '')) {
                        span.textContent = newChar;

                        const isMainTimer = (elementId === 'timer-arrival-display' || elementId === 'timer-relationship-display');
                        const store = Alpine.store('app');

                        if (isMainTimer && store && store.config && store.config.effects_enabled && store.ui.currentPage === 'page-main') {
                            if (typeof spawnParticles === 'function') {
                                spawnParticles({
                                     originElement: span,
                                    symbol: store.config.effect_particle_day || 'üíñ',
                                    count: 1, spread: 30, distance: 300, duration: 1200
                                });
                            } else {
                                console.warn("[Ticker] –§—É–Ω–∫—Ü–∏—è spawnParticles –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. (effects.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω?)");
                            }
                        }
                    }
                });
                this.previousTimeString = currentTimeString;
            }
        }
    };
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alpine ---
document.addEventListener('alpine:init', () => {
    console.log("--- [DEBUG] Alpine.js: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...");

    Alpine.store('app', {
        // ... (–í—Å–µ –∏–∑ v2.1: config, log, lang, ui) ...
        config: null,
        log: null,
        lang: {},
        ui: {
            currentPage: 'page-main',
            isLoaded: false,
            error: null,
            hoverTargetType: null // null | 'header-button' | 'arrival' | 'relationship'
        },

        // --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (INIT) ---
        // ... (v2.1 init() –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        async init() {
            console.log("--- [DEBUG] Store.init(): –°—Ç–∞—Ä—Ç...");
            try {
                console.log("--- [DEBUG] Store.init(): –ó–∞–ø—Ä–æ—Å config –∏ log...");
                const [configRes, logRes] = await Promise.all([
                    fetch('/api/config'),
                    fetch('/api/calendar_log')
                ]);
                if (!configRes.ok) throw new Error(`–û—à–∏–±–∫–∞ API /api/config: ${configRes.status}`);
                if (!logRes.ok) throw new Error(`–û—à–∏–±–∫–∞ API /api/calendar_log: ${logRes.status}`);
                this.config = await configRes.json();
                this.log = await logRes.json();
                console.log("--- [DEBUG] Store.init(): Config –∏ Log –ø–æ–ª—É—á–µ–Ω—ã.");
                if (!this.config || !this.log || !this.config.language) {
                    throw new Error("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ config –∏–ª–∏ log –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.");
                }
                console.log(`--- [DEBUG] Store.init(): –ó–∞–ø—Ä–æ—Å —è–∑—ã–∫–∞ ${this.config.language}...`);
                const langRes = await fetch(`/static/lang/${this.config.language}.json`);
                if (!langRes.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–∞: ${this.config.language}.json`);
                this.lang = await langRes.json();
                console.log("--- [DEBUG] Store.init(): –Ø–∑—ã–∫ –∑–∞–≥—Ä—É–∂–µ–Ω.");
                this.applyDynamicStyles();
                console.log("--- [DEBUG] Store.init(): –£–°–ü–ï–•. Config, Log, Lang –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
                this.ui.isLoaded = true;

                if (typeof resetCalendarZoom === 'function') {
                    resetCalendarZoom();
                } else { console.warn("[App.init] resetCalendarZoom –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"); }
                if (typeof initCalendarZoom === 'function') {
                    initCalendarZoom();
                } else { console.warn("[App.init] initCalendarZoom –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"); }

                if (this.config.is_first_launch) {
                     console.log("--- [DEBUG] –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö. (–õ–æ–≥–∏–∫–∞ –º–æ–¥–∞–ª–∫–∏ –±—É–¥–µ—Ç –∑–¥–µ—Å—å)");
                     this.navigateTo('page-settings');
                }
            } catch (error) {
                console.error("--- [DEBUG] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ Store.init():", error);
                this.ui.error = error.message;
            }
        },

        // --- 3. –ú–µ—Ç–æ–¥—ã (ACTIONS) ---
        // ... (v2.1 navigateTo() –∏ applyDynamicStyles() –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        navigateTo(pageId) {
            if (this.ui.currentPage === pageId) return;
            this.ui.currentPage = pageId;
            console.log(`--- [DEBUG-REACTIVE] UI: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ ${pageId}`);
        },
        applyDynamicStyles() {
            if (!this.config || !this.config.colors) {
                console.warn("--- [DEBUG] Store.applyDynamicStyles: –û–±—ä–µ–∫—Ç colors –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.");
                return;
            }
            console.log("--- [DEBUG] Store: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...");
            const root = document.documentElement;
            try {
                Object.keys(this.config.colors).forEach(key => {
                    const cssVar = `--${key.replace(/_/g, '-')}`;
                    root.style.setProperty(cssVar, this.config.colors[key]);
                });
                root.style.setProperty('--calendar-empty-cell-color', this.config.calendar_empty_cell_color);
                root.style.setProperty('--calendar-marked-day-color', this.config.calendar_marked_day_color);
                root.style.setProperty('--sticker-color', this.config.sticker_color);
                root.style.setProperty('--sticker-scale-factor', this.config.sticker_scale);
                const blurValue = parseInt(this.config.blur_strength, 10);
                if (!isNaN(blurValue) && blurValue >= 0) {
                     root.style.setProperty('--blur-strength', `${blurValue}px`);
                     console.log(`--- [DEBUG] Store: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω --blur-strength: ${blurValue}px`);
                } else {
                     console.warn("[App.applyDynamicStyles] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ blur_strength –≤ –∫–æ–Ω—Ñ–∏–≥–µ.");
                     root.style.setProperty('--blur-strength', '3px'); // –î–µ—Ñ–æ–ª—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                }

                console.log("--- [DEBUG] Store: CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.");
            } catch (error) {
                 console.error("--- [DEBUG] –û—à–∏–±–∫–∞ –≤ applyDynamicStyles:", error);
            }
        },

        /**
         * (–ù–û–í–û–ï) –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (API + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ state).
         * @param {string} dateString - "YYYY-MM-DD"
         * @param {HTMLElement} cell - –≠–ª–µ–º–µ–Ω—Ç .day-cell
         */
        async toggleDate(dateString, cell) {
            if (!dateString || !cell || !this.log) return; // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ this.log
            console.log(`--- [DEBUG] Store.toggleDate: ${dateString}`);

            cell.style.pointerEvents = 'none';
            cell.style.opacity = '0.5';

            try {
                const response = await fetch('/api/calendar/toggle', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ date: dateString })
                });

                if (!response.ok) throw new Error(`API /calendar/toggle Error: ${response.status}`);

                const result = await response.json();
                console.log("--- [DEBUG] –û—Ç–≤–µ—Ç API:", result);

                // --- –†–ï–ê–ö–¢–ò–í–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï ---
                // Alpine.js –æ—Ç—Å–ª–µ–¥–∏—Ç —ç—Ç—É –º—É—Ç–∞—Ü–∏—é –∏ *—Å–∞–º* –ø–µ—Ä–µ—Ä–∏—Å—É–µ—Ç UI
                if (result.status === 'added' && result.entry) {
                    // –í–∞–∂–Ω–æ: Pydantic –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–∞—Ç, Alpine –Ω—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç Date
                    this.log.marked_dates[dateString] = result.entry;
                } else if (result.status === 'removed') {
                    delete this.log.marked_dates[dateString];
                }

                // –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
                if (this.config.effects_enabled && result.status === 'added') {
                    if (typeof spawnParticles === 'function') {
                        spawnParticles({
                             originElement: cell,
                             symbol: this.config.effect_particle_day || 'üíñ', // –ò—Å–ø–æ–ª—å–∑—É–µ–º this.config
                             count: 1, spread: 360, distance: 400, duration: 1200
                        });
                    }
                }

            } catch (error) {
                console.error("--- [DEBUG] –û—à–∏–±–∫–∞ –≤ toggleDate:", error);
                // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —é–∑–µ—Ä—É —Ç–æ—Å—Ç "–û—à–∏–±–∫–∞!"
            } finally {
                cell.style.pointerEvents = 'auto';
                cell.style.opacity = '1';
            }
        }, // –ö–æ–Ω–µ—Ü toggleDate

        // --- 4. Getters (–ù–û–í–û–ï) ---
        /**
         * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∂–∏–º ('countdown' –∏–ª–∏ 'elapsed') –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.
         */
        getCustomTimerMode(dateString) {
            const targetDate = new Date(dateString);
            return (targetDate > new Date()) ? 'countdown' : 'elapsed';
        },

        /**
         * –í—ã—á–∏—Å–ª—è–µ—Ç —Ü–≤–µ—Ç —Ü–∏—Ñ—Ä –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.
         */
        getCustomTimerColor(dateString) {
            if (!this.config) return null;
            const mode = this.getCustomTimerMode(dateString);
            return mode === 'countdown'
                ? this.config.colors.color_timer_countdown
                : this.config.colors.color_timer_elapsed;
        },

/**
         * (v2.5 - –§–ò–ö–° UTC) [GETTER] –í—ã—á–∏—Å–ª—è–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –º–µ—Å—è—Ü–µ–≤.
         */
        get calendarMonths() {
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ config –∏ lang
            if (!this.config || !this.lang || !this.lang.weekdays_short) {
                // –£–±—Ä–∞–ª–∏ –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ, —Ç.–∫. Alpine —Å–∞–º –µ–≥–æ –≤—ã–∑–æ–≤–µ—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                return [];
            }
            console.log("--- [DEBUG] Store: –ü–µ—Ä–µ—Å—á–µ—Ç calendarMonths()...");

            try {
                // --- (–ò–°–ü–†–ê–í–õ–ï–ù–û UTC –ü–ê–†–°–ò–ù–ì) ---
                // Pydantic –¥–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ ISO 8601 ("YYYY-MM-DDTHH:mm:ss...").
                // –ù–∞–º –Ω—É–∂–Ω–æ –ù–ê–ß–ê–õ–û –î–ù–Ø –≤ UTC.
                const parseDateStrToUTCMidnight = (isoString) => {
                    if (!isoString) return null;
                    try {
                        // 1. –°–æ–∑–¥–∞–µ–º Date –æ–±—ä–µ–∫—Ç (–æ–Ω –±—É–¥–µ—Ç –≤ –õ–û–ö–ê–õ–¨–ù–û–ú –ø–æ—è—Å–µ)
                        const localDate = new Date(isoString);
                        // 2. –ü–æ–ª—É—á–∞–µ–º UTC –≥–æ–¥, –º–µ—Å—è—Ü, –¥–µ–Ω—å
                        const year = localDate.getUTCFullYear();
                        const month = localDate.getUTCMonth();
                        const day = localDate.getUTCDate();
                        // 3. –°–æ–±–∏—Ä–∞–µ–º Date –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç 00:00:00 UTC
                        return new Date(Date.UTC(year, month, day));
                    } catch (e) {
                        console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã UTC: ${isoString}`, e);
                        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    }
                };

                const departureDateUTC = parseDateStrToUTCMidnight(this.config.date_vova_departure);
                const arrivalDateUTC = parseDateStrToUTCMidnight(this.config.date_vova_arrival);

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                if (!departureDateUTC || !arrivalDateUTC) {
                    console.error("--- [DEBUG] Store.calendarMonths: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—ã UTC.");
                    return [];
                }

                // –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ –°–õ–ï–î–£–Æ–©–ï–ì–û –¥–Ω—è –ø–æ—Å–ª–µ –æ—Ç—ä–µ–∑–¥–∞ (–≤ UTC)
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É, —á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å departureDateUTC
                const startDateUTC = new Date(departureDateUTC.getTime() + 86400000); // +1 –¥–µ–Ω—å
                const endDateUTC = arrivalDateUTC;
                // --- (–ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô UTC) ---

                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º getTime() - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ UTC –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                if (startDateUTC.getTime() > endDateUTC.getTime()) {
                    console.warn("--- [DEBUG] Store.calendarMonths: –û–®–ò–ë–ö–ê –î–ò–ê–ü–ê–ó–û–ù–ê (–ù–∞—á–∞–ª–æ > –ö–æ–Ω–µ—Ü).");
                    return [];
                }

                const months = [];
                // –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ UTC –º–µ—Å—è—Ü–∞–º
                let currentDateUTC = new Date(Date.UTC(startDateUTC.getUTCFullYear(), startDateUTC.getUTCMonth(), 1));

                // –¶–∏–∫–ª –∏–¥–µ—Ç, –ø–æ–∫–∞ –ü–ï–†–í–û–ï —á–∏—Å–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –ú–ï–ù–¨–®–ï –ò–õ–ò –†–ê–í–ù–û –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–µ
                while (currentDateUTC.getTime() <= endDateUTC.getTime()) {
                    const year = currentDateUTC.getUTCFullYear();
                    const month = currentDateUTC.getUTCMonth(); // 0-11
                    // –ü–µ—Ä–µ–¥–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã UTC –≤ generateMonthGrid
                    months.push(this.generateMonthGrid(year, month, startDateUTC.getTime(), endDateUTC.getTime()));
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É UTC
                    currentDateUTC.setUTCMonth(currentDateUTC.getUTCMonth() + 1);
                }
                console.log(`--- [DEBUG] Store: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${months.length} –º–µ—Å—è—Ü–µ–≤.`);
                return months;

            } catch (e) {
                 console.error("--- [DEBUG] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ calendarMonths:", e);
                 return [];
            }
        },

/**
         * (v2.6 - –§–ò–ö–° cell) [HELPER] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ 42 –¥–Ω–µ–π –¥–ª—è —Å–µ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞.
         */
        generateMonthGrid(year, month, globalStartUTCms, globalEndUTCms) {
            const monthName = new Date(Date.UTC(year, month)).toLocaleString(this.config.language || 'ru', { month: 'long', timeZone: 'UTC' });
            const firstDayOfMonth = new Date(Date.UTC(year, month, 1)).getUTCDay(); // 0=–í—Å, 1=–ü–Ω UTC
            const paddingDays = (firstDayOfMonth === 0) ? 6 : (firstDayOfMonth - 1);
            const daysInMonth = new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
            const daysArray = [];

            console.log(`--- [DEBUG] generateMonthGrid (${year}-${month}): Start`); // –î–æ–±–∞–≤–∏–º –ª–æ–≥

            for (let i = 0; i < 42; i++) {
                const dayOfMonth = i - paddingDays + 1;

                // *** –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ cell ***
                const cell = {
                    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è x-for –≤ –≠–¢–û–ú –º–µ—Å—è—Ü–µ
                    key: `${year}-${month}-${i}`,
                    day: dayOfMonth,
                    isPadding: true,    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–æ–π
                    isInRange: false,   // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                    dateString: null,   // "YYYY-MM-DD" (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–Ω–µ–π isInRange)
                    isArrival: false    // –≠—Ç–æ –¥–µ–Ω—å –ø—Ä–∏–µ–∑–¥–∞?
                };
                // *** –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ***

                // –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                if (dayOfMonth >= 1 && dayOfMonth <= daysInMonth) {
                    const cellDateUTCms = Date.UTC(year, month, dayOfMonth);

                    // –ï—Å–ª–∏ –¥–µ–Ω—å –í–ù–£–¢–†–ò –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                    if (cellDateUTCms >= globalStartUTCms && cellDateUTCms <= globalEndUTCms) {
                        cell.isPadding = false; // –ù–µ –ø—É—Å—Ç–∞—è
                        cell.isInRange = true;  // –ê–∫—Ç–∏–≤–Ω–∞—è
                        const dateObj = new Date(cellDateUTCms);
                        // –§–æ—Ä–º–∏—Ä—É–µ–º "YYYY-MM-DD" —Å—Ç—Ä–æ–∫—É –¥–ª—è API –∏ –ª–æ–≥–∞
                        cell.dateString = `${dateObj.getUTCFullYear()}-${String(dateObj.getUTCMonth() + 1).padStart(2, '0')}-${String(dateObj.getUTCDate()).padStart(2, '0')}`;

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –¥–µ–Ω—å –ø—Ä–∏–µ–∑–¥–∞?
                        if (cellDateUTCms === globalEndUTCms) {
                            cell.isArrival = true;
                        }
                    } else {
                        // –î–µ–Ω—å –º–µ—Å—è—Ü–∞, –Ω–æ –í–ù–ï –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ –æ—Ç—ä–µ–∑–¥–∞+1)
                        cell.isPadding = false; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å–ª–æ, –Ω–æ —è—á–µ–π–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
                        cell.isInRange = false;
                    }
                }
                // –ï—Å–ª–∏ dayOfMonth < 1 –∏–ª–∏ > daysInMonth, —Ç–æ cell –æ—Å—Ç–∞–µ—Ç—Å—è —Å isPadding: true

                daysArray.push(cell);
            }

            // --- –î–µ–±–∞–≥ –ö–ª—é—á–µ–π ---
            const keys = daysArray.map(d => d.key);
            // console.log("Generated Day Keys:", keys); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ —Å–Ω–æ–≤–∞ –±—É–¥—É—Ç –æ—à–∏–±–∫–∏ –∫–ª—é—á–µ–π
            const uniqueKeys = new Set(keys);
            if (uniqueKeys.size !== keys.length) {
                console.error(`!!! –î–£–ë–õ–ò–ö–ê–¢–´ –ö–õ–Æ–ß–ï–ô –≤ ${year}-${month} !!!`);
            }
            if (keys.some(k => k === undefined)) {
                 console.error(`!!! UNDEFINED –ö–õ–Æ–ß –≤ ${year}-${month} !!!`);
            }
            // --- –ö–æ–Ω–µ—Ü –î–µ–±–∞–≥–∞ ---

            return {
                key: `${year}-${month}`, // –ö–ª—é—á –¥–ª—è x-for –º–µ—Å—è—Ü–µ–≤
                title: `${monthName.toUpperCase()} ${year}`,
                weekdays: this.lang.weekdays_short,
                days: daysArray // –ú–∞—Å—Å–∏–≤ –∏–∑ 42 –æ–±—ä–µ–∫—Ç–æ–≤ cell
            };
        }, // –ö–æ–Ω–µ—Ü generateMonthGrid

        /**
         * (–ù–û–í–û–ï) [HELPER] –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∏–ª—å transform –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞
         */
        getStickerTransform(dateString) {
            // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ this.log
            const entry = this.log?.marked_dates?.[dateString];
            if (!entry) return '';
            let transform = `rotate(${entry.rotation}deg)`;
            if (this.config?.sticker_scale !== 1.0) {
                 transform += ` scale(${this.config.sticker_scale})`;
            }
            return transform;
        },

        /**
         * (–ù–û–í–û–ï) [HELPER] –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∏–ª—å transform –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞ –î–ù–Ø –ü–†–ò–ï–ó–î–ê
         */
        getArrivalStickerTransform() {
            if (!this.config?.arrival_day) return '';
            let transform = '';
            if (this.config.arrival_day.sticker_scale !== 1.0) {
                transform += ` scale(${this.config.arrival_day.sticker_scale})`;
            }
            return transform;
        },

        /**
         * (–ù–û–í–û–ï) [HELPER] –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –º–µ—Å—è—Ü.
         */
        isMonthCompleted(month) {
            // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ this.log
            if (!this.log?.marked_dates || !month?.days) return false;
            // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –Ω–æ –ù–ï –æ—Ç–º–µ—á–µ–Ω
            const notMarkedDay = month.days.find(day =>
                day.isInRange && !this.log.marked_dates[day.dateString]
            );
            // –ï—Å–ª–∏ —Ç–∞–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –ò –≤ –º–µ—Å—è—Ü–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
            return !notMarkedDay && month.days.some(day => day.isInRange);
        },
        /**
         * (–ù–û–í–û–ï) [HELPER] –ó–∞–ø—É—Å–∫–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ—Å—è—Ü–∞.
         */
        triggerMonthCompletionEffect(monthElement, monthData) {
            if (!this.config?.effects_enabled || !monthElement || !monthData?.days) return;

            console.log(`--- [DEBUG] –≠–§–§–ï–ö–¢: –ú–µ—Å—è—Ü ${monthData.title} –ó–ê–í–ï–†–®–ï–ù!`);

            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ *–∞–∫—Ç–∏–≤–Ω—ã–µ* —è—á–µ–π–∫–∏ –¥–Ω–µ–π
            const dayCells = monthElement.querySelectorAll('.day-cell.in-range');

            // 1. –ß–∞—Å—Ç–∏—Ü—ã –¥–Ω—è –∏–∑ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
            dayCells.forEach(cell => {
                if (typeof spawnParticles === 'function') {
                    spawnParticles({
                        originElement: cell,
                        symbol: this.config.effect_particle_day || 'üíñ',
                        count: 1, spread: 360, distance: 400, duration: 1200
                    });
                }
            });

            // 2. –ß–∞—Å—Ç–∏—Ü—ã –º–µ—Å—è—Ü–∞ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞ –º–æ–¥—É–ª—è (–µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –∑–∞–¥–∞–Ω)
            if (this.config.effect_particle_month && typeof spawnParticles === 'function') {
                 spawnParticles({
                     originElement: monthElement, // –¶–µ–Ω—Ç—Ä –º–æ–¥—É–ª—è
                     symbol: this.config.effect_particle_month,
                     count: 20, spread: 360,
                     distance: Math.max(window.innerWidth / 2, window.innerHeight / 2, 600),
                     duration: 1800,
                     particleClass: 'month-particle' // –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
                 });
            }
        },
        setHoverTarget(type) {
            this.ui.hoverTargetType = type;
        },
         // –ö–æ–Ω–µ—Ü triggerMonthCompletionEffect

    });
});