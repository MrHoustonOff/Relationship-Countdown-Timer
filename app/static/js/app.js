/**
 * @fileoverview v2.2 (—Å Ticker)
 * –†–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —è–¥—Ä–æ.
 * –®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω alpineTicker –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∞–π–º–µ—Ä–æ–≤.
 */

// --- –£—Ç–∏–ª–∏—Ç–∞ Ticker (x-init) ---
function alpineTicker(elementId, getTargetDate, getMode, getCompletedMsg) {
    return {
        // State
        element: null,
        intervalId: null,
        previousTimeString: '--:--:--:--',

        // Getters
        get targetDate() { return new Date(getTargetDate()); },
        get mode() { return getMode(); },
        get completedMessage() { return getCompletedMsg(); },

        // --- Init (–ò–°–ü–†–ê–í–õ–ï–ù–û) ---
        init() {
            // (–§–ò–ö–° ‚Ññ2)
            // –ú—ã "–æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º" init, —á—Ç–æ–±—ã Alpine —É—Å–ø–µ–ª –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å
            // –¥–æ—á–µ—Ä–Ω–∏–π div, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏—â–µ–º –ø–æ ID.
            Alpine.nextTick(() => {
                this.element = document.getElementById(elementId);
                if (!this.element) {
                    // –≠—Ç–∞ –æ—à–∏–±–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–ª—è—Ç—å—Å—è
                    console.error(`[Ticker] –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: #${elementId}`);
                    return;
                }
                // –°–æ–∑–¥–∞–µ–º span'—ã
                this.element.innerHTML = this.previousTimeString.split('')
                    .map((char, i) => `<span class="digit-char digit-${i}">${char}</span>`)
                    .join('');

                // $watch —Å–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
                Alpine.watch(() => [this.targetDate, this.mode, this.completedMessage], () => {
                    console.log(`[Ticker] ${elementId}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ. (–ü–µ—Ä–µ)–ó–∞–ø—É—Å–∫...`);
                    this.stop();
                    if (this.targetDate && !isNaN(this.targetDate.getTime())) {
                       this.start();
                    }
                });

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ü–ï–†–í–´–ô –†–ê–ó
                 if (this.targetDate && !isNaN(this.targetDate.getTime())) {
                       this.start();
                 }
            });
        }, // –ö–æ–Ω–µ—Ü init

        // --- Methods ---
        start() {
            if (this.intervalId) return; // –£–∂–µ –∑–∞–ø—É—â–µ–Ω
            this.update(); // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–ø–¥–µ–π—Ç
            this.intervalId = setInterval(() => this.update(), 1000);
        },
        stop() {
            clearInterval(this.intervalId);
            this.intervalId = null;
        },

        // --- update (–ò–°–ü–†–ê–í–õ–ï–ù–û) ---
        update() {
            if (!this.element) return;

            const now = new Date();
            let diffMs;

            // (–§–ò–ö–° ‚Ññ1)
            // 'this.referenceDate' –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ 'this.targetDate'
            if (this.mode === 'countdown') {
                diffMs = this.targetDate.getTime() - now.getTime();
            } else {
                diffMs = now.getTime() - this.targetDate.getTime(); // <-- –í–û–¢ –§–ò–ö–°
            }
            // --- (–ö–æ–Ω–µ—Ü —Ñ–∏–∫—Å–∞) ---

            if (this.mode === 'countdown' && diffMs < 0) {
                this.element.innerHTML = this.completedMessage;
                this.stop();
                return;
            }

            const totalSeconds = Math.floor(Math.abs(diffMs) / 1000);
            const days = Math.floor(totalSeconds / 86400);
            const hours = Math.floor((totalSeconds % 86400) / 3600);
            const minutes = Math.floor((totalSeconds % 3600) / 60);
            const seconds = totalSeconds % 60;

            const pad = (num) => (num < 10 ? '0' + num : num.toString());
            const currentTimeString = `${pad(days)}:${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;

            if (currentTimeString !== this.previousTimeString) {
                const spans = this.element.querySelectorAll('.digit-char');
                const currentChars = currentTimeString.split('');

                currentChars.forEach((newChar, index) => {
                    const span = spans[index];
                    if (span && newChar !== (this.previousTimeString[index] || '')) {
                        span.textContent = newChar;

                        const isMainTimer = (elementId === 'timer-arrival-display' || elementId === 'timer-relationship-display');
                        const store = Alpine.store('app');

                        if (isMainTimer && store && store.config && store.config.effects_enabled && store.ui.currentPage === 'page-main') {
                            if (typeof spawnParticles === 'function') {
                                spawnParticles({
                                     originElement: span,
                                    symbol: store.config.effect_particle_day || 'üíñ',
                                    count: 1, spread: 30, distance: 300, duration: 1200
                                });
                            } else {
                                console.warn("[Ticker] –§—É–Ω–∫—Ü–∏—è spawnParticles –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. (effects.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω?)");
                            }
                        }
                    }
                });
                this.previousTimeString = currentTimeString;
            }
        }
    };
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alpine ---
document.addEventListener('alpine:init', () => {
    console.log("--- [DEBUG] Alpine.js: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...");

    Alpine.store('app', {
        // ... (–í—Å–µ –∏–∑ v2.1: config, log, lang, ui) ...
        config: null,
        log: null,
        lang: {},
        ui: {
            currentPage: 'page-main',
            isLoaded: false,
            error: null,
            // (–ù–û–í–û–ï) –î–ª—è –±–ª—é—Ä–∞ (–≤–µ—Ä–Ω–µ–º –Ω–∞ –®–∞–≥–µ 5)
            // hoverTarget: null
        },

        // --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (INIT) ---
        // ... (v2.1 init() –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        async init() {
            console.log("--- [DEBUG] Store.init(): –°—Ç–∞—Ä—Ç...");
            try {
                console.log("--- [DEBUG] Store.init(): –ó–∞–ø—Ä–æ—Å config –∏ log...");
                const [configRes, logRes] = await Promise.all([
                    fetch('/api/config'),
                    fetch('/api/calendar_log')
                ]);
                if (!configRes.ok) throw new Error(`–û—à–∏–±–∫–∞ API /api/config: ${configRes.status}`);
                if (!logRes.ok) throw new Error(`–û—à–∏–±–∫–∞ API /api/calendar_log: ${logRes.status}`);
                this.config = await configRes.json();
                this.log = await logRes.json();
                console.log("--- [DEBUG] Store.init(): Config –∏ Log –ø–æ–ª—É—á–µ–Ω—ã.");
                if (!this.config || !this.log || !this.config.language) {
                    throw new Error("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ config –∏–ª–∏ log –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.");
                }
                console.log(`--- [DEBUG] Store.init(): –ó–∞–ø—Ä–æ—Å —è–∑—ã–∫–∞ ${this.config.language}...`);
                const langRes = await fetch(`/static/lang/${this.config.language}.json`);
                if (!langRes.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–∞: ${this.config.language}.json`);
                this.lang = await langRes.json();
                console.log("--- [DEBUG] Store.init(): –Ø–∑—ã–∫ –∑–∞–≥—Ä—É–∂–µ–Ω.");
                this.applyDynamicStyles();
                console.log("--- [DEBUG] Store.init(): –£–°–ü–ï–•. Config, Log, Lang –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
                this.ui.isLoaded = true;
                if (this.config.is_first_launch) {
                     console.log("--- [DEBUG] –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö. (–õ–æ–≥–∏–∫–∞ –º–æ–¥–∞–ª–∫–∏ –±—É–¥–µ—Ç –∑–¥–µ—Å—å)");
                     this.navigateTo('page-settings');
                }
            } catch (error) {
                console.error("--- [DEBUG] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ Store.init():", error);
                this.ui.error = error.message;
            }
        },

        // --- 3. –ú–µ—Ç–æ–¥—ã (ACTIONS) ---
        // ... (v2.1 navigateTo() –∏ applyDynamicStyles() –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        navigateTo(pageId) {
            if (this.ui.currentPage === pageId) return;
            this.ui.currentPage = pageId;
            console.log(`--- [DEBUG-REACTIVE] UI: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ ${pageId}`);
        },
        applyDynamicStyles() {
            if (!this.config || !this.config.colors) {
                console.warn("--- [DEBUG] Store.applyDynamicStyles: –û–±—ä–µ–∫—Ç colors –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.");
                return;
            }
            console.log("--- [DEBUG] Store: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...");
            const root = document.documentElement;
            try {
                Object.keys(this.config.colors).forEach(key => {
                    const cssVar = `--${key.replace(/_/g, '-')}`;
                    root.style.setProperty(cssVar, this.config.colors[key]);
                });
                root.style.setProperty('--calendar-empty-cell-color', this.config.calendar_empty_cell_color);
                root.style.setProperty('--calendar-marked-day-color', this.config.calendar_marked_day_color);
                root.style.setProperty('--sticker-color', this.config.sticker_color);
                root.style.setProperty('--sticker-scale-factor', this.config.sticker_scale);
                console.log("--- [DEBUG] Store: CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.");
            } catch (error) {
                 console.error("--- [DEBUG] –û—à–∏–±–∫–∞ –≤ applyDynamicStyles:", error);
            }
        },

        // --- 4. Getters (–ù–û–í–û–ï) ---
        /**
         * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∂–∏–º ('countdown' –∏–ª–∏ 'elapsed') –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.
         */
        getCustomTimerMode(dateString) {
            const targetDate = new Date(dateString);
            return (targetDate > new Date()) ? 'countdown' : 'elapsed';
        },

        /**
         * –í—ã—á–∏—Å–ª—è–µ—Ç —Ü–≤–µ—Ç —Ü–∏—Ñ—Ä –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.
         */
        getCustomTimerColor(dateString) {
            if (!this.config) return null;
            const mode = this.getCustomTimerMode(dateString);
            return mode === 'countdown'
                ? this.config.colors.color_timer_countdown
                : this.config.colors.color_timer_elapsed;
        }

    });
});